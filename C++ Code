#include <iostream>
using namespace std;

struct Node
{
    int data;
    Node* left, * right;

    Node(int data)
    {
        this->data = data;
        this->left = this->right = nullptr;
    }
};


void inorder(Node* root)
{
    if (root == nullptr) {
        return;
    }

    inorder(root->left);
    cout << root->data << " ";
    inorder(root->right);
}


bool isLeaf(Node* node) {
    return (node->left == nullptr && node->right == nullptr);
}


void trunc(Node*& curr, int k, int target)
{

    if (curr == nullptr) {
        return;
    }


    target = target + (curr->data);

    trunc(curr->left, k, target);
    trunc(curr->right, k, target);

    if (target < k && isLeaf(curr))
    {

        delete(curr);

        curr = nullptr;
    }
};


void truncate(Node*& root, int k)
{
    int target = 0;
    trunc(root, k, target);
}

int main()
{

    Node* root = new Node(6);
    root->left = new Node(3);
    root->right = new Node(8);
    root->right->left = new Node(4);
    root->right->right = new Node(2);
    root->right->left->left = new Node(1);
    root->right->left->right = new Node(7);
    root->right->right->right = new Node(3);

    int k = 20;
    truncate(root, k);
    inorder(root);

    return 0;
}
